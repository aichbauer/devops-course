// Import required dependencies from OpenTelemetry packages
const { NodeSDK } = require('@opentelemetry/sdk-node');
// NodeSDK provides an easy way to set up and manage OpenTelemetry for a Node.js application.

const { OTLPTraceExporter } = require('@opentelemetry/exporter-otlp-grpc');
// OTLPTraceExporter is used to export trace data to a backend via gRPC (e.g., Tempo or OpenTelemetry Collector).

const { getNodeAutoInstrumentations } = require('@opentelemetry/auto-instrumentations-node');
// Automatically instruments popular Node.js libraries (like HTTP, Fastify, and others) to capture telemetry data without manual setup.

const { Resource } = require('@opentelemetry/resources');
// Resource represents metadata about the service (e.g., service name, version).

const { SemanticResourceAttributes } = require('@opentelemetry/semantic-conventions');
// Semantic conventions define standard attributes (e.g., service name) for telemetry data.

// Define the resource for this service
const resource = Resource.default().merge(
  new Resource({
    [SemanticResourceAttributes.SERVICE_NAME]: 'user-service',
    // Sets the service name to "user-service". This helps identify traces from this service in Tempo or Grafana.
  })
);

// Configure the OTLP trace exporter
const traceExporter = new OTLPTraceExporter({
  url: 'http://localhost:4317',
  // Specifies the endpoint of the OpenTelemetry Collector or Tempo's OTLP gRPC receiver.
});

// Initialize the NodeSDK with the configured resource, trace exporter, and instrumentations
const sdk = new NodeSDK({
  resource: resource,
  // Attaches metadata (service name, etc.) to traces generated by this application.
  traceExporter,
  // Sends trace data to the specified OTLP endpoint.
  instrumentations: [getNodeAutoInstrumentations()],
  // Enables automatic instrumentation for supported libraries (e.g., HTTP, Express).
});

// Start the SDK to begin tracing
sdk.start();
// Initializes OpenTelemetry and starts collecting and exporting trace data.
